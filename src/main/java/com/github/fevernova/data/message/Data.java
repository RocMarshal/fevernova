/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */

package com.github.fevernova.data.message;


import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;


@org.apache.avro.specific.AvroGenerated
public class Data extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {


    private static final long                   serialVersionUID = 6429783915970116205L;

    public static final  org.apache.avro.Schema SCHEMA$          = new org.apache.avro.Schema.Parser()
            .parse("{\"type\":\"record\",\"name\":\"Data\",\"namespace\":\"com.github.fevernova.data.message\",\"fields\":[{\"name\":\"nid\","
                   + "\"type\":\"long\"},{\"name\":\"sid\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},"
                   + "{\"name\":\"opt\",\"type\":{\"type\":\"enum\",\"name\":\"Opt\",\"symbols\":[\"INSERT\",\"UPDATE\",\"DELETE\"]}},"
                   + "{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"tags\",\"type\":[{\"type\":\"map\",\"values\":[\"null\","
                   + "{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"metaId\","
                   + "\"type\":\"long\"},{\"name\":\"updatesLong\",\"type\":\"long\"},{\"name\":\"longs\",\"type\":[{\"type\":\"array\","
                   + "\"items\":[\"null\",\"long\"]},\"null\"]},{\"name\":\"strings\",\"type\":[{\"type\":\"array\",\"items\":[\"null\","
                   + "{\"type\":\"string\",\"avro.java.string\":\"String\"}]},\"null\"]},{\"name\":\"ints\",\"type\":[{\"type\":\"array\","
                   + "\"items\":[\"null\",\"int\"]},\"null\"]},{\"name\":\"doubles\",\"type\":[{\"type\":\"array\",\"items\":[\"null\","
                   + "\"double\"]},\"null\"]},{\"name\":\"floats\",\"type\":[{\"type\":\"array\",\"items\":[\"null\",\"float\"]},\"null\"]},"
                   + "{\"name\":\"bytes\",\"type\":[{\"type\":\"array\",\"items\":[\"null\",\"bytes\"]},\"null\"]},{\"name\":\"booleans\","
                   + "\"type\":[{\"type\":\"array\",\"items\":[\"null\",\"boolean\"]},\"null\"]},{\"name\":\"meta\",\"type\":[\"null\","
                   + "\"bytes\"]}]}");


    public static org.apache.avro.Schema getClassSchema() {

        return SCHEMA$;
    }


    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<Data> ENCODER =
            new BinaryMessageEncoder<Data>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<Data> DECODER =
            new BinaryMessageDecoder<Data>(MODEL$, SCHEMA$);


    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Data> getEncoder() {

        return ENCODER;
    }


    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Data> getDecoder() {

        return DECODER;
    }


    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Data> createDecoder(SchemaStore resolver) {

        return new BinaryMessageDecoder<Data>(MODEL$, SCHEMA$, resolver);
    }


    /**
     * Serializes this Data to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {

        return ENCODER.encode(this);
    }


    /**
     * Deserializes a Data from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Data instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Data fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {

        return DECODER.decode(b);
    }


    private long                                              nid;

    private java.lang.String                                  sid;

    private com.github.fevernova.data.message.Opt             opt;

    private long                                              timestamp;

    private java.util.Map<java.lang.String, java.lang.String> tags;

    private long                                              metaId;

    private long                                              updatesLong;

    private java.util.List<java.lang.Long>                    longs;

    private java.util.List<java.lang.String>                  strings;

    private java.util.List<java.lang.Integer>                 ints;

    private java.util.List<java.lang.Double>                  doubles;

    private java.util.List<java.lang.Float>                   floats;

    private java.util.List<java.nio.ByteBuffer>               bytes;

    private java.util.List<java.lang.Boolean>                 booleans;

    private java.nio.ByteBuffer                               meta;


    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Data() {

    }


    /**
     * All-args constructor.
     * @param nid The new value for nid
     * @param sid The new value for sid
     * @param opt The new value for opt
     * @param timestamp The new value for timestamp
     * @param tags The new value for tags
     * @param metaId The new value for metaId
     * @param updatesLong The new value for updatesLong
     * @param longs The new value for longs
     * @param strings The new value for strings
     * @param ints The new value for ints
     * @param doubles The new value for doubles
     * @param floats The new value for floats
     * @param bytes The new value for bytes
     * @param booleans The new value for booleans
     * @param meta The new value for meta
     */
    public Data(java.lang.Long nid, java.lang.String sid, com.github.fevernova.data.message.Opt opt, java.lang.Long timestamp,
                java.util.Map<java.lang.String, java.lang.String> tags, java.lang.Long metaId, java.lang.Long updatesLong,
                java.util.List<java.lang.Long> longs, java.util.List<java.lang.String> strings, java.util.List<java.lang.Integer> ints,
                java.util.List<java.lang.Double> doubles, java.util.List<java.lang.Float> floats, java.util.List<java.nio.ByteBuffer> bytes,
                java.util.List<java.lang.Boolean> booleans, java.nio.ByteBuffer meta) {

        this.nid = nid;
        this.sid = sid;
        this.opt = opt;
        this.timestamp = timestamp;
        this.tags = tags;
        this.metaId = metaId;
        this.updatesLong = updatesLong;
        this.longs = longs;
        this.strings = strings;
        this.ints = ints;
        this.doubles = doubles;
        this.floats = floats;
        this.bytes = bytes;
        this.booleans = booleans;
        this.meta = meta;
    }


    public org.apache.avro.specific.SpecificData getSpecificData() {

        return MODEL$;
    }


    public org.apache.avro.Schema getSchema() {

        return SCHEMA$;
    }


    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {

        switch (field$) {
            case 0:
                return nid;
            case 1:
                return sid;
            case 2:
                return opt;
            case 3:
                return timestamp;
            case 4:
                return tags;
            case 5:
                return metaId;
            case 6:
                return updatesLong;
            case 7:
                return longs;
            case 8:
                return strings;
            case 9:
                return ints;
            case 10:
                return doubles;
            case 11:
                return floats;
            case 12:
                return bytes;
            case 13:
                return booleans;
            case 14:
                return meta;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }


    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {

        switch (field$) {
            case 0:
                nid = (java.lang.Long) value$;
                break;
            case 1:
                sid = (java.lang.String) value$;
                break;
            case 2:
                opt = (com.github.fevernova.data.message.Opt) value$;
                break;
            case 3:
                timestamp = (java.lang.Long) value$;
                break;
            case 4:
                tags = (java.util.Map<java.lang.String, java.lang.String>) value$;
                break;
            case 5:
                metaId = (java.lang.Long) value$;
                break;
            case 6:
                updatesLong = (java.lang.Long) value$;
                break;
            case 7:
                longs = (java.util.List<java.lang.Long>) value$;
                break;
            case 8:
                strings = (java.util.List<java.lang.String>) value$;
                break;
            case 9:
                ints = (java.util.List<java.lang.Integer>) value$;
                break;
            case 10:
                doubles = (java.util.List<java.lang.Double>) value$;
                break;
            case 11:
                floats = (java.util.List<java.lang.Float>) value$;
                break;
            case 12:
                bytes = (java.util.List<java.nio.ByteBuffer>) value$;
                break;
            case 13:
                booleans = (java.util.List<java.lang.Boolean>) value$;
                break;
            case 14:
                meta = (java.nio.ByteBuffer) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }


    /**
     * Gets the value of the 'nid' field.
     * @return The value of the 'nid' field.
     */
    public long getNid() {

        return nid;
    }


    /**
     * Sets the value of the 'nid' field.
     * @param value the value to set.
     */
    public void setNid(long value) {

        this.nid = value;
    }


    /**
     * Gets the value of the 'sid' field.
     * @return The value of the 'sid' field.
     */
    public java.lang.String getSid() {

        return sid;
    }


    /**
     * Sets the value of the 'sid' field.
     * @param value the value to set.
     */
    public void setSid(java.lang.String value) {

        this.sid = value;
    }


    /**
     * Gets the value of the 'opt' field.
     * @return The value of the 'opt' field.
     */
    public com.github.fevernova.data.message.Opt getOpt() {

        return opt;
    }


    /**
     * Sets the value of the 'opt' field.
     * @param value the value to set.
     */
    public void setOpt(com.github.fevernova.data.message.Opt value) {

        this.opt = value;
    }


    /**
     * Gets the value of the 'timestamp' field.
     * @return The value of the 'timestamp' field.
     */
    public long getTimestamp() {

        return timestamp;
    }


    /**
     * Sets the value of the 'timestamp' field.
     * @param value the value to set.
     */
    public void setTimestamp(long value) {

        this.timestamp = value;
    }


    /**
     * Gets the value of the 'tags' field.
     * @return The value of the 'tags' field.
     */
    public java.util.Map<java.lang.String, java.lang.String> getTags() {

        return tags;
    }


    /**
     * Sets the value of the 'tags' field.
     * @param value the value to set.
     */
    public void setTags(java.util.Map<java.lang.String, java.lang.String> value) {

        this.tags = value;
    }


    /**
     * Gets the value of the 'metaId' field.
     * @return The value of the 'metaId' field.
     */
    public long getMetaId() {

        return metaId;
    }


    /**
     * Sets the value of the 'metaId' field.
     * @param value the value to set.
     */
    public void setMetaId(long value) {

        this.metaId = value;
    }


    /**
     * Gets the value of the 'updatesLong' field.
     * @return The value of the 'updatesLong' field.
     */
    public long getUpdatesLong() {

        return updatesLong;
    }


    /**
     * Sets the value of the 'updatesLong' field.
     * @param value the value to set.
     */
    public void setUpdatesLong(long value) {

        this.updatesLong = value;
    }


    /**
     * Gets the value of the 'longs' field.
     * @return The value of the 'longs' field.
     */
    public java.util.List<java.lang.Long> getLongs() {

        return longs;
    }


    /**
     * Sets the value of the 'longs' field.
     * @param value the value to set.
     */
    public void setLongs(java.util.List<java.lang.Long> value) {

        this.longs = value;
    }


    /**
     * Gets the value of the 'strings' field.
     * @return The value of the 'strings' field.
     */
    public java.util.List<java.lang.String> getStrings() {

        return strings;
    }


    /**
     * Sets the value of the 'strings' field.
     * @param value the value to set.
     */
    public void setStrings(java.util.List<java.lang.String> value) {

        this.strings = value;
    }


    /**
     * Gets the value of the 'ints' field.
     * @return The value of the 'ints' field.
     */
    public java.util.List<java.lang.Integer> getInts() {

        return ints;
    }


    /**
     * Sets the value of the 'ints' field.
     * @param value the value to set.
     */
    public void setInts(java.util.List<java.lang.Integer> value) {

        this.ints = value;
    }


    /**
     * Gets the value of the 'doubles' field.
     * @return The value of the 'doubles' field.
     */
    public java.util.List<java.lang.Double> getDoubles() {

        return doubles;
    }


    /**
     * Sets the value of the 'doubles' field.
     * @param value the value to set.
     */
    public void setDoubles(java.util.List<java.lang.Double> value) {

        this.doubles = value;
    }


    /**
     * Gets the value of the 'floats' field.
     * @return The value of the 'floats' field.
     */
    public java.util.List<java.lang.Float> getFloats() {

        return floats;
    }


    /**
     * Sets the value of the 'floats' field.
     * @param value the value to set.
     */
    public void setFloats(java.util.List<java.lang.Float> value) {

        this.floats = value;
    }


    /**
     * Gets the value of the 'bytes' field.
     * @return The value of the 'bytes' field.
     */
    public java.util.List<java.nio.ByteBuffer> getBytes() {

        return bytes;
    }


    /**
     * Sets the value of the 'bytes' field.
     * @param value the value to set.
     */
    public void setBytes(java.util.List<java.nio.ByteBuffer> value) {

        this.bytes = value;
    }


    /**
     * Gets the value of the 'booleans' field.
     * @return The value of the 'booleans' field.
     */
    public java.util.List<java.lang.Boolean> getBooleans() {

        return booleans;
    }


    /**
     * Sets the value of the 'booleans' field.
     * @param value the value to set.
     */
    public void setBooleans(java.util.List<java.lang.Boolean> value) {

        this.booleans = value;
    }


    /**
     * Gets the value of the 'meta' field.
     * @return The value of the 'meta' field.
     */
    public java.nio.ByteBuffer getMeta() {

        return meta;
    }


    /**
     * Sets the value of the 'meta' field.
     * @param value the value to set.
     */
    public void setMeta(java.nio.ByteBuffer value) {

        this.meta = value;
    }


    /**
     * Creates a new Data RecordBuilder.
     * @return A new Data RecordBuilder
     */
    public static com.github.fevernova.data.message.Data.Builder newBuilder() {

        return new com.github.fevernova.data.message.Data.Builder();
    }


    /**
     * Creates a new Data RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new Data RecordBuilder
     */
    public static com.github.fevernova.data.message.Data.Builder newBuilder(com.github.fevernova.data.message.Data.Builder other) {

        if (other == null) {
            return new com.github.fevernova.data.message.Data.Builder();
        } else {
            return new com.github.fevernova.data.message.Data.Builder(other);
        }
    }


    /**
     * Creates a new Data RecordBuilder by copying an existing Data instance.
     * @param other The existing instance to copy.
     * @return A new Data RecordBuilder
     */
    public static com.github.fevernova.data.message.Data.Builder newBuilder(com.github.fevernova.data.message.Data other) {

        if (other == null) {
            return new com.github.fevernova.data.message.Data.Builder();
        } else {
            return new com.github.fevernova.data.message.Data.Builder(other);
        }
    }


    /**
     * RecordBuilder for Data instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Data>
            implements org.apache.avro.data.RecordBuilder<Data> {


        private long                                              nid;

        private java.lang.String                                  sid;

        private com.github.fevernova.data.message.Opt             opt;

        private long                                              timestamp;

        private java.util.Map<java.lang.String, java.lang.String> tags;

        private long                                              metaId;

        private long                                              updatesLong;

        private java.util.List<java.lang.Long>                    longs;

        private java.util.List<java.lang.String>                  strings;

        private java.util.List<java.lang.Integer>                 ints;

        private java.util.List<java.lang.Double>                  doubles;

        private java.util.List<java.lang.Float>                   floats;

        private java.util.List<java.nio.ByteBuffer>               bytes;

        private java.util.List<java.lang.Boolean>                 booleans;

        private java.nio.ByteBuffer                               meta;


        /** Creates a new Builder */
        private Builder() {

            super(SCHEMA$);
        }


        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.github.fevernova.data.message.Data.Builder other) {

            super(other);
            if (isValidValue(fields()[0], other.nid)) {
                this.nid = data().deepCopy(fields()[0].schema(), other.nid);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.sid)) {
                this.sid = data().deepCopy(fields()[1].schema(), other.sid);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.opt)) {
                this.opt = data().deepCopy(fields()[2].schema(), other.opt);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.tags)) {
                this.tags = data().deepCopy(fields()[4].schema(), other.tags);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.metaId)) {
                this.metaId = data().deepCopy(fields()[5].schema(), other.metaId);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.updatesLong)) {
                this.updatesLong = data().deepCopy(fields()[6].schema(), other.updatesLong);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.longs)) {
                this.longs = data().deepCopy(fields()[7].schema(), other.longs);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8], other.strings)) {
                this.strings = data().deepCopy(fields()[8].schema(), other.strings);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
            if (isValidValue(fields()[9], other.ints)) {
                this.ints = data().deepCopy(fields()[9].schema(), other.ints);
                fieldSetFlags()[9] = other.fieldSetFlags()[9];
            }
            if (isValidValue(fields()[10], other.doubles)) {
                this.doubles = data().deepCopy(fields()[10].schema(), other.doubles);
                fieldSetFlags()[10] = other.fieldSetFlags()[10];
            }
            if (isValidValue(fields()[11], other.floats)) {
                this.floats = data().deepCopy(fields()[11].schema(), other.floats);
                fieldSetFlags()[11] = other.fieldSetFlags()[11];
            }
            if (isValidValue(fields()[12], other.bytes)) {
                this.bytes = data().deepCopy(fields()[12].schema(), other.bytes);
                fieldSetFlags()[12] = other.fieldSetFlags()[12];
            }
            if (isValidValue(fields()[13], other.booleans)) {
                this.booleans = data().deepCopy(fields()[13].schema(), other.booleans);
                fieldSetFlags()[13] = other.fieldSetFlags()[13];
            }
            if (isValidValue(fields()[14], other.meta)) {
                this.meta = data().deepCopy(fields()[14].schema(), other.meta);
                fieldSetFlags()[14] = other.fieldSetFlags()[14];
            }
        }


        /**
         * Creates a Builder by copying an existing Data instance
         * @param other The existing instance to copy.
         */
        private Builder(com.github.fevernova.data.message.Data other) {

            super(SCHEMA$);
            if (isValidValue(fields()[0], other.nid)) {
                this.nid = data().deepCopy(fields()[0].schema(), other.nid);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.sid)) {
                this.sid = data().deepCopy(fields()[1].schema(), other.sid);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.opt)) {
                this.opt = data().deepCopy(fields()[2].schema(), other.opt);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.tags)) {
                this.tags = data().deepCopy(fields()[4].schema(), other.tags);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.metaId)) {
                this.metaId = data().deepCopy(fields()[5].schema(), other.metaId);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.updatesLong)) {
                this.updatesLong = data().deepCopy(fields()[6].schema(), other.updatesLong);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.longs)) {
                this.longs = data().deepCopy(fields()[7].schema(), other.longs);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.strings)) {
                this.strings = data().deepCopy(fields()[8].schema(), other.strings);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.ints)) {
                this.ints = data().deepCopy(fields()[9].schema(), other.ints);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.doubles)) {
                this.doubles = data().deepCopy(fields()[10].schema(), other.doubles);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.floats)) {
                this.floats = data().deepCopy(fields()[11].schema(), other.floats);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.bytes)) {
                this.bytes = data().deepCopy(fields()[12].schema(), other.bytes);
                fieldSetFlags()[12] = true;
            }
            if (isValidValue(fields()[13], other.booleans)) {
                this.booleans = data().deepCopy(fields()[13].schema(), other.booleans);
                fieldSetFlags()[13] = true;
            }
            if (isValidValue(fields()[14], other.meta)) {
                this.meta = data().deepCopy(fields()[14].schema(), other.meta);
                fieldSetFlags()[14] = true;
            }
        }


        /**
         * Gets the value of the 'nid' field.
         * @return The value.
         */
        public long getNid() {

            return nid;
        }


        /**
         * Sets the value of the 'nid' field.
         * @param value The value of 'nid'.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder setNid(long value) {

            validate(fields()[0], value);
            this.nid = value;
            fieldSetFlags()[0] = true;
            return this;
        }


        /**
         * Checks whether the 'nid' field has been set.
         * @return True if the 'nid' field has been set, false otherwise.
         */
        public boolean hasNid() {

            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'nid' field.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder clearNid() {

            fieldSetFlags()[0] = false;
            return this;
        }


        /**
         * Gets the value of the 'sid' field.
         * @return The value.
         */
        public java.lang.String getSid() {

            return sid;
        }


        /**
         * Sets the value of the 'sid' field.
         * @param value The value of 'sid'.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder setSid(java.lang.String value) {

            validate(fields()[1], value);
            this.sid = value;
            fieldSetFlags()[1] = true;
            return this;
        }


        /**
         * Checks whether the 'sid' field has been set.
         * @return True if the 'sid' field has been set, false otherwise.
         */
        public boolean hasSid() {

            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'sid' field.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder clearSid() {

            sid = null;
            fieldSetFlags()[1] = false;
            return this;
        }


        /**
         * Gets the value of the 'opt' field.
         * @return The value.
         */
        public com.github.fevernova.data.message.Opt getOpt() {

            return opt;
        }


        /**
         * Sets the value of the 'opt' field.
         * @param value The value of 'opt'.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder setOpt(com.github.fevernova.data.message.Opt value) {

            validate(fields()[2], value);
            this.opt = value;
            fieldSetFlags()[2] = true;
            return this;
        }


        /**
         * Checks whether the 'opt' field has been set.
         * @return True if the 'opt' field has been set, false otherwise.
         */
        public boolean hasOpt() {

            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'opt' field.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder clearOpt() {

            opt = null;
            fieldSetFlags()[2] = false;
            return this;
        }


        /**
         * Gets the value of the 'timestamp' field.
         * @return The value.
         */
        public long getTimestamp() {

            return timestamp;
        }


        /**
         * Sets the value of the 'timestamp' field.
         * @param value The value of 'timestamp'.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder setTimestamp(long value) {

            validate(fields()[3], value);
            this.timestamp = value;
            fieldSetFlags()[3] = true;
            return this;
        }


        /**
         * Checks whether the 'timestamp' field has been set.
         * @return True if the 'timestamp' field has been set, false otherwise.
         */
        public boolean hasTimestamp() {

            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'timestamp' field.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder clearTimestamp() {

            fieldSetFlags()[3] = false;
            return this;
        }


        /**
         * Gets the value of the 'tags' field.
         * @return The value.
         */
        public java.util.Map<java.lang.String, java.lang.String> getTags() {

            return tags;
        }


        /**
         * Sets the value of the 'tags' field.
         * @param value The value of 'tags'.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder setTags(java.util.Map<java.lang.String, java.lang.String> value) {

            validate(fields()[4], value);
            this.tags = value;
            fieldSetFlags()[4] = true;
            return this;
        }


        /**
         * Checks whether the 'tags' field has been set.
         * @return True if the 'tags' field has been set, false otherwise.
         */
        public boolean hasTags() {

            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'tags' field.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder clearTags() {

            tags = null;
            fieldSetFlags()[4] = false;
            return this;
        }


        /**
         * Gets the value of the 'metaId' field.
         * @return The value.
         */
        public long getMetaId() {

            return metaId;
        }


        /**
         * Sets the value of the 'metaId' field.
         * @param value The value of 'metaId'.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder setMetaId(long value) {

            validate(fields()[5], value);
            this.metaId = value;
            fieldSetFlags()[5] = true;
            return this;
        }


        /**
         * Checks whether the 'metaId' field has been set.
         * @return True if the 'metaId' field has been set, false otherwise.
         */
        public boolean hasMetaId() {

            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'metaId' field.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder clearMetaId() {

            fieldSetFlags()[5] = false;
            return this;
        }


        /**
         * Gets the value of the 'updatesLong' field.
         * @return The value.
         */
        public long getUpdatesLong() {

            return updatesLong;
        }


        /**
         * Sets the value of the 'updatesLong' field.
         * @param value The value of 'updatesLong'.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder setUpdatesLong(long value) {

            validate(fields()[6], value);
            this.updatesLong = value;
            fieldSetFlags()[6] = true;
            return this;
        }


        /**
         * Checks whether the 'updatesLong' field has been set.
         * @return True if the 'updatesLong' field has been set, false otherwise.
         */
        public boolean hasUpdatesLong() {

            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'updatesLong' field.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder clearUpdatesLong() {

            fieldSetFlags()[6] = false;
            return this;
        }


        /**
         * Gets the value of the 'longs' field.
         * @return The value.
         */
        public java.util.List<java.lang.Long> getLongs() {

            return longs;
        }


        /**
         * Sets the value of the 'longs' field.
         * @param value The value of 'longs'.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder setLongs(java.util.List<java.lang.Long> value) {

            validate(fields()[7], value);
            this.longs = value;
            fieldSetFlags()[7] = true;
            return this;
        }


        /**
         * Checks whether the 'longs' field has been set.
         * @return True if the 'longs' field has been set, false otherwise.
         */
        public boolean hasLongs() {

            return fieldSetFlags()[7];
        }


        /**
         * Clears the value of the 'longs' field.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder clearLongs() {

            longs = null;
            fieldSetFlags()[7] = false;
            return this;
        }


        /**
         * Gets the value of the 'strings' field.
         * @return The value.
         */
        public java.util.List<java.lang.String> getStrings() {

            return strings;
        }


        /**
         * Sets the value of the 'strings' field.
         * @param value The value of 'strings'.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder setStrings(java.util.List<java.lang.String> value) {

            validate(fields()[8], value);
            this.strings = value;
            fieldSetFlags()[8] = true;
            return this;
        }


        /**
         * Checks whether the 'strings' field has been set.
         * @return True if the 'strings' field has been set, false otherwise.
         */
        public boolean hasStrings() {

            return fieldSetFlags()[8];
        }


        /**
         * Clears the value of the 'strings' field.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder clearStrings() {

            strings = null;
            fieldSetFlags()[8] = false;
            return this;
        }


        /**
         * Gets the value of the 'ints' field.
         * @return The value.
         */
        public java.util.List<java.lang.Integer> getInts() {

            return ints;
        }


        /**
         * Sets the value of the 'ints' field.
         * @param value The value of 'ints'.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder setInts(java.util.List<java.lang.Integer> value) {

            validate(fields()[9], value);
            this.ints = value;
            fieldSetFlags()[9] = true;
            return this;
        }


        /**
         * Checks whether the 'ints' field has been set.
         * @return True if the 'ints' field has been set, false otherwise.
         */
        public boolean hasInts() {

            return fieldSetFlags()[9];
        }


        /**
         * Clears the value of the 'ints' field.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder clearInts() {

            ints = null;
            fieldSetFlags()[9] = false;
            return this;
        }


        /**
         * Gets the value of the 'doubles' field.
         * @return The value.
         */
        public java.util.List<java.lang.Double> getDoubles() {

            return doubles;
        }


        /**
         * Sets the value of the 'doubles' field.
         * @param value The value of 'doubles'.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder setDoubles(java.util.List<java.lang.Double> value) {

            validate(fields()[10], value);
            this.doubles = value;
            fieldSetFlags()[10] = true;
            return this;
        }


        /**
         * Checks whether the 'doubles' field has been set.
         * @return True if the 'doubles' field has been set, false otherwise.
         */
        public boolean hasDoubles() {

            return fieldSetFlags()[10];
        }


        /**
         * Clears the value of the 'doubles' field.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder clearDoubles() {

            doubles = null;
            fieldSetFlags()[10] = false;
            return this;
        }


        /**
         * Gets the value of the 'floats' field.
         * @return The value.
         */
        public java.util.List<java.lang.Float> getFloats() {

            return floats;
        }


        /**
         * Sets the value of the 'floats' field.
         * @param value The value of 'floats'.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder setFloats(java.util.List<java.lang.Float> value) {

            validate(fields()[11], value);
            this.floats = value;
            fieldSetFlags()[11] = true;
            return this;
        }


        /**
         * Checks whether the 'floats' field has been set.
         * @return True if the 'floats' field has been set, false otherwise.
         */
        public boolean hasFloats() {

            return fieldSetFlags()[11];
        }


        /**
         * Clears the value of the 'floats' field.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder clearFloats() {

            floats = null;
            fieldSetFlags()[11] = false;
            return this;
        }


        /**
         * Gets the value of the 'bytes' field.
         * @return The value.
         */
        public java.util.List<java.nio.ByteBuffer> getBytes() {

            return bytes;
        }


        /**
         * Sets the value of the 'bytes' field.
         * @param value The value of 'bytes'.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder setBytes(java.util.List<java.nio.ByteBuffer> value) {

            validate(fields()[12], value);
            this.bytes = value;
            fieldSetFlags()[12] = true;
            return this;
        }


        /**
         * Checks whether the 'bytes' field has been set.
         * @return True if the 'bytes' field has been set, false otherwise.
         */
        public boolean hasBytes() {

            return fieldSetFlags()[12];
        }


        /**
         * Clears the value of the 'bytes' field.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder clearBytes() {

            bytes = null;
            fieldSetFlags()[12] = false;
            return this;
        }


        /**
         * Gets the value of the 'booleans' field.
         * @return The value.
         */
        public java.util.List<java.lang.Boolean> getBooleans() {

            return booleans;
        }


        /**
         * Sets the value of the 'booleans' field.
         * @param value The value of 'booleans'.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder setBooleans(java.util.List<java.lang.Boolean> value) {

            validate(fields()[13], value);
            this.booleans = value;
            fieldSetFlags()[13] = true;
            return this;
        }


        /**
         * Checks whether the 'booleans' field has been set.
         * @return True if the 'booleans' field has been set, false otherwise.
         */
        public boolean hasBooleans() {

            return fieldSetFlags()[13];
        }


        /**
         * Clears the value of the 'booleans' field.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder clearBooleans() {

            booleans = null;
            fieldSetFlags()[13] = false;
            return this;
        }


        /**
         * Gets the value of the 'meta' field.
         * @return The value.
         */
        public java.nio.ByteBuffer getMeta() {

            return meta;
        }


        /**
         * Sets the value of the 'meta' field.
         * @param value The value of 'meta'.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder setMeta(java.nio.ByteBuffer value) {

            validate(fields()[14], value);
            this.meta = value;
            fieldSetFlags()[14] = true;
            return this;
        }


        /**
         * Checks whether the 'meta' field has been set.
         * @return True if the 'meta' field has been set, false otherwise.
         */
        public boolean hasMeta() {

            return fieldSetFlags()[14];
        }


        /**
         * Clears the value of the 'meta' field.
         * @return This builder.
         */
        public com.github.fevernova.data.message.Data.Builder clearMeta() {

            meta = null;
            fieldSetFlags()[14] = false;
            return this;
        }


        @Override
        @SuppressWarnings("unchecked")
        public Data build() {

            try {
                Data record = new Data();
                record.nid = fieldSetFlags()[0] ? this.nid : (java.lang.Long) defaultValue(fields()[0]);
                record.sid = fieldSetFlags()[1] ? this.sid : (java.lang.String) defaultValue(fields()[1]);
                record.opt = fieldSetFlags()[2] ? this.opt : (com.github.fevernova.data.message.Opt) defaultValue(fields()[2]);
                record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
                record.tags = fieldSetFlags()[4] ? this.tags : (java.util.Map<java.lang.String, java.lang.String>) defaultValue(fields()[4]);
                record.metaId = fieldSetFlags()[5] ? this.metaId : (java.lang.Long) defaultValue(fields()[5]);
                record.updatesLong = fieldSetFlags()[6] ? this.updatesLong : (java.lang.Long) defaultValue(fields()[6]);
                record.longs = fieldSetFlags()[7] ? this.longs : (java.util.List<java.lang.Long>) defaultValue(fields()[7]);
                record.strings = fieldSetFlags()[8] ? this.strings : (java.util.List<java.lang.String>) defaultValue(fields()[8]);
                record.ints = fieldSetFlags()[9] ? this.ints : (java.util.List<java.lang.Integer>) defaultValue(fields()[9]);
                record.doubles = fieldSetFlags()[10] ? this.doubles : (java.util.List<java.lang.Double>) defaultValue(fields()[10]);
                record.floats = fieldSetFlags()[11] ? this.floats : (java.util.List<java.lang.Float>) defaultValue(fields()[11]);
                record.bytes = fieldSetFlags()[12] ? this.bytes : (java.util.List<java.nio.ByteBuffer>) defaultValue(fields()[12]);
                record.booleans = fieldSetFlags()[13] ? this.booleans : (java.util.List<java.lang.Boolean>) defaultValue(fields()[13]);
                record.meta = fieldSetFlags()[14] ? this.meta : (java.nio.ByteBuffer) defaultValue(fields()[14]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }


    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Data>
            WRITER$ = (org.apache.avro.io.DatumWriter<Data>) MODEL$.createDatumWriter(SCHEMA$);


    @Override public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {

        WRITER$.write(this, SpecificData.getEncoder(out));
    }


    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Data>
            READER$ = (org.apache.avro.io.DatumReader<Data>) MODEL$.createDatumReader(SCHEMA$);


    @Override public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {

        READER$.read(this, SpecificData.getDecoder(in));
    }


    @Override protected boolean hasCustomCoders() {

        return true;
    }


    @Override public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {

        out.writeLong(this.nid);

        if (this.sid == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.sid);
        }

        out.writeEnum(this.opt.ordinal());

        out.writeLong(this.timestamp);

        if (this.tags == null) {
            out.writeIndex(1);
            out.writeNull();
        } else {
            out.writeIndex(0);
            long size0 = this.tags.size();
            out.writeMapStart();
            out.setItemCount(size0);
            long actualSize0 = 0;
            for (java.util.Map.Entry<java.lang.String, java.lang.String> e0 : this.tags.entrySet()) {
                actualSize0++;
                out.startItem();
                out.writeString(e0.getKey());
                java.lang.String v0 = e0.getValue();
                if (v0 == null) {
                    out.writeIndex(0);
                    out.writeNull();
                } else {
                    out.writeIndex(1);
                    out.writeString(v0);
                }
            }
            out.writeMapEnd();
            if (actualSize0 != size0)
                throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");
        }

        out.writeLong(this.metaId);

        out.writeLong(this.updatesLong);

        if (this.longs == null) {
            out.writeIndex(1);
            out.writeNull();
        } else {
            out.writeIndex(0);
            long size1 = this.longs.size();
            out.writeArrayStart();
            out.setItemCount(size1);
            long actualSize1 = 0;
            for (java.lang.Long e1 : this.longs) {
                actualSize1++;
                out.startItem();
                if (e1 == null) {
                    out.writeIndex(0);
                    out.writeNull();
                } else {
                    out.writeIndex(1);
                    out.writeLong(e1);
                }
            }
            out.writeArrayEnd();
            if (actualSize1 != size1)
                throw new java.util.ConcurrentModificationException(
                        "Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
        }

        if (this.strings == null) {
            out.writeIndex(1);
            out.writeNull();
        } else {
            out.writeIndex(0);
            long size2 = this.strings.size();
            out.writeArrayStart();
            out.setItemCount(size2);
            long actualSize2 = 0;
            for (java.lang.String e2 : this.strings) {
                actualSize2++;
                out.startItem();
                if (e2 == null) {
                    out.writeIndex(0);
                    out.writeNull();
                } else {
                    out.writeIndex(1);
                    out.writeString(e2);
                }
            }
            out.writeArrayEnd();
            if (actualSize2 != size2)
                throw new java.util.ConcurrentModificationException(
                        "Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
        }

        if (this.ints == null) {
            out.writeIndex(1);
            out.writeNull();
        } else {
            out.writeIndex(0);
            long size3 = this.ints.size();
            out.writeArrayStart();
            out.setItemCount(size3);
            long actualSize3 = 0;
            for (java.lang.Integer e3 : this.ints) {
                actualSize3++;
                out.startItem();
                if (e3 == null) {
                    out.writeIndex(0);
                    out.writeNull();
                } else {
                    out.writeIndex(1);
                    out.writeInt(e3);
                }
            }
            out.writeArrayEnd();
            if (actualSize3 != size3)
                throw new java.util.ConcurrentModificationException(
                        "Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");
        }

        if (this.doubles == null) {
            out.writeIndex(1);
            out.writeNull();
        } else {
            out.writeIndex(0);
            long size4 = this.doubles.size();
            out.writeArrayStart();
            out.setItemCount(size4);
            long actualSize4 = 0;
            for (java.lang.Double e4 : this.doubles) {
                actualSize4++;
                out.startItem();
                if (e4 == null) {
                    out.writeIndex(0);
                    out.writeNull();
                } else {
                    out.writeIndex(1);
                    out.writeDouble(e4);
                }
            }
            out.writeArrayEnd();
            if (actualSize4 != size4)
                throw new java.util.ConcurrentModificationException(
                        "Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");
        }

        if (this.floats == null) {
            out.writeIndex(1);
            out.writeNull();
        } else {
            out.writeIndex(0);
            long size5 = this.floats.size();
            out.writeArrayStart();
            out.setItemCount(size5);
            long actualSize5 = 0;
            for (java.lang.Float e5 : this.floats) {
                actualSize5++;
                out.startItem();
                if (e5 == null) {
                    out.writeIndex(0);
                    out.writeNull();
                } else {
                    out.writeIndex(1);
                    out.writeFloat(e5);
                }
            }
            out.writeArrayEnd();
            if (actualSize5 != size5)
                throw new java.util.ConcurrentModificationException(
                        "Array-size written was " + size5 + ", but element count was " + actualSize5 + ".");
        }

        if (this.bytes == null) {
            out.writeIndex(1);
            out.writeNull();
        } else {
            out.writeIndex(0);
            long size6 = this.bytes.size();
            out.writeArrayStart();
            out.setItemCount(size6);
            long actualSize6 = 0;
            for (java.nio.ByteBuffer e6 : this.bytes) {
                actualSize6++;
                out.startItem();
                if (e6 == null) {
                    out.writeIndex(0);
                    out.writeNull();
                } else {
                    out.writeIndex(1);
                    out.writeBytes(e6);
                }
            }
            out.writeArrayEnd();
            if (actualSize6 != size6)
                throw new java.util.ConcurrentModificationException(
                        "Array-size written was " + size6 + ", but element count was " + actualSize6 + ".");
        }

        if (this.booleans == null) {
            out.writeIndex(1);
            out.writeNull();
        } else {
            out.writeIndex(0);
            long size7 = this.booleans.size();
            out.writeArrayStart();
            out.setItemCount(size7);
            long actualSize7 = 0;
            for (java.lang.Boolean e7 : this.booleans) {
                actualSize7++;
                out.startItem();
                if (e7 == null) {
                    out.writeIndex(0);
                    out.writeNull();
                } else {
                    out.writeIndex(1);
                    out.writeBoolean(e7);
                }
            }
            out.writeArrayEnd();
            if (actualSize7 != size7)
                throw new java.util.ConcurrentModificationException(
                        "Array-size written was " + size7 + ", but element count was " + actualSize7 + ".");
        }

        if (this.meta == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeBytes(this.meta);
        }

    }


    @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {

        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.nid = in.readLong();

            if (in.readIndex() != 1) {
                in.readNull();
                this.sid = null;
            } else {
                this.sid = in.readString();
            }

            this.opt = com.github.fevernova.data.message.Opt.values()[in.readEnum()];

            this.timestamp = in.readLong();

            if (in.readIndex() != 0) {
                in.readNull();
                this.tags = null;
            } else {
                long size0 = in.readMapStart();
                java.util.Map<java.lang.String, java.lang.String> m0 = this.tags; // Need fresh name due to limitation of macro system
                if (m0 == null) {
                    m0 = new java.util.HashMap<java.lang.String, java.lang.String>((int) size0);
                    this.tags = m0;
                } else
                    m0.clear();
                for (; 0 < size0; size0 = in.mapNext()) {
                    for (; size0 != 0; size0--) {
                        java.lang.String k0 = null;
                        k0 = in.readString();
                        java.lang.String v0 = null;
                        if (in.readIndex() != 1) {
                            in.readNull();
                            v0 = null;
                        } else {
                            v0 = in.readString();
                        }
                        m0.put(k0, v0);
                    }
                }
            }

            this.metaId = in.readLong();

            this.updatesLong = in.readLong();

            if (in.readIndex() != 0) {
                in.readNull();
                this.longs = null;
            } else {
                long size1 = in.readArrayStart();
                java.util.List<java.lang.Long> a1 = this.longs;
                if (a1 == null) {
                    a1 = new SpecificData.Array<java.lang.Long>((int) size1, SCHEMA$.getField("longs").schema().getTypes().get(0));
                    this.longs = a1;
                } else
                    a1.clear();
                SpecificData.Array<java.lang.Long> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Long>) a1 : null);
                for (; 0 < size1; size1 = in.arrayNext()) {
                    for (; size1 != 0; size1--) {
                        java.lang.Long e1 = (ga1 != null ? ga1.peek() : null);
                        if (in.readIndex() != 1) {
                            in.readNull();
                            e1 = null;
                        } else {
                            e1 = in.readLong();
                        }
                        a1.add(e1);
                    }
                }
            }

            if (in.readIndex() != 0) {
                in.readNull();
                this.strings = null;
            } else {
                long size2 = in.readArrayStart();
                java.util.List<java.lang.String> a2 = this.strings;
                if (a2 == null) {
                    a2 = new SpecificData.Array<java.lang.String>((int) size2, SCHEMA$.getField("strings").schema().getTypes().get(0));
                    this.strings = a2;
                } else
                    a2.clear();
                SpecificData.Array<java.lang.String> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>) a2 : null);
                for (; 0 < size2; size2 = in.arrayNext()) {
                    for (; size2 != 0; size2--) {
                        java.lang.String e2 = (ga2 != null ? ga2.peek() : null);
                        if (in.readIndex() != 1) {
                            in.readNull();
                            e2 = null;
                        } else {
                            e2 = in.readString();
                        }
                        a2.add(e2);
                    }
                }
            }

            if (in.readIndex() != 0) {
                in.readNull();
                this.ints = null;
            } else {
                long size3 = in.readArrayStart();
                java.util.List<java.lang.Integer> a3 = this.ints;
                if (a3 == null) {
                    a3 = new SpecificData.Array<java.lang.Integer>((int) size3, SCHEMA$.getField("ints").schema().getTypes().get(0));
                    this.ints = a3;
                } else
                    a3.clear();
                SpecificData.Array<java.lang.Integer> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>) a3 : null);
                for (; 0 < size3; size3 = in.arrayNext()) {
                    for (; size3 != 0; size3--) {
                        java.lang.Integer e3 = (ga3 != null ? ga3.peek() : null);
                        if (in.readIndex() != 1) {
                            in.readNull();
                            e3 = null;
                        } else {
                            e3 = in.readInt();
                        }
                        a3.add(e3);
                    }
                }
            }

            if (in.readIndex() != 0) {
                in.readNull();
                this.doubles = null;
            } else {
                long size4 = in.readArrayStart();
                java.util.List<java.lang.Double> a4 = this.doubles;
                if (a4 == null) {
                    a4 = new SpecificData.Array<java.lang.Double>((int) size4, SCHEMA$.getField("doubles").schema().getTypes().get(0));
                    this.doubles = a4;
                } else
                    a4.clear();
                SpecificData.Array<java.lang.Double> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>) a4 : null);
                for (; 0 < size4; size4 = in.arrayNext()) {
                    for (; size4 != 0; size4--) {
                        java.lang.Double e4 = (ga4 != null ? ga4.peek() : null);
                        if (in.readIndex() != 1) {
                            in.readNull();
                            e4 = null;
                        } else {
                            e4 = in.readDouble();
                        }
                        a4.add(e4);
                    }
                }
            }

            if (in.readIndex() != 0) {
                in.readNull();
                this.floats = null;
            } else {
                long size5 = in.readArrayStart();
                java.util.List<java.lang.Float> a5 = this.floats;
                if (a5 == null) {
                    a5 = new SpecificData.Array<java.lang.Float>((int) size5, SCHEMA$.getField("floats").schema().getTypes().get(0));
                    this.floats = a5;
                } else
                    a5.clear();
                SpecificData.Array<java.lang.Float> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a5 : null);
                for (; 0 < size5; size5 = in.arrayNext()) {
                    for (; size5 != 0; size5--) {
                        java.lang.Float e5 = (ga5 != null ? ga5.peek() : null);
                        if (in.readIndex() != 1) {
                            in.readNull();
                            e5 = null;
                        } else {
                            e5 = in.readFloat();
                        }
                        a5.add(e5);
                    }
                }
            }

            if (in.readIndex() != 0) {
                in.readNull();
                this.bytes = null;
            } else {
                long size6 = in.readArrayStart();
                java.util.List<java.nio.ByteBuffer> a6 = this.bytes;
                if (a6 == null) {
                    a6 = new SpecificData.Array<java.nio.ByteBuffer>((int) size6, SCHEMA$.getField("bytes").schema().getTypes().get(0));
                    this.bytes = a6;
                } else
                    a6.clear();
                SpecificData.Array<java.nio.ByteBuffer> ga6 =
                        (a6 instanceof SpecificData.Array ? (SpecificData.Array<java.nio.ByteBuffer>) a6 : null);
                for (; 0 < size6; size6 = in.arrayNext()) {
                    for (; size6 != 0; size6--) {
                        java.nio.ByteBuffer e6 = (ga6 != null ? ga6.peek() : null);
                        if (in.readIndex() != 1) {
                            in.readNull();
                            e6 = null;
                        } else {
                            e6 = in.readBytes(e6);
                        }
                        a6.add(e6);
                    }
                }
            }

            if (in.readIndex() != 0) {
                in.readNull();
                this.booleans = null;
            } else {
                long size7 = in.readArrayStart();
                java.util.List<java.lang.Boolean> a7 = this.booleans;
                if (a7 == null) {
                    a7 = new SpecificData.Array<java.lang.Boolean>((int) size7, SCHEMA$.getField("booleans").schema().getTypes().get(0));
                    this.booleans = a7;
                } else
                    a7.clear();
                SpecificData.Array<java.lang.Boolean> ga7 = (a7 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Boolean>) a7 : null);
                for (; 0 < size7; size7 = in.arrayNext()) {
                    for (; size7 != 0; size7--) {
                        java.lang.Boolean e7 = (ga7 != null ? ga7.peek() : null);
                        if (in.readIndex() != 1) {
                            in.readNull();
                            e7 = null;
                        } else {
                            e7 = in.readBoolean();
                        }
                        a7.add(e7);
                    }
                }
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.meta = null;
            } else {
                this.meta = in.readBytes(this.meta);
            }

        } else {
            for (int i = 0; i < 15; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.nid = in.readLong();
                        break;

                    case 1:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.sid = null;
                        } else {
                            this.sid = in.readString();
                        }
                        break;

                    case 2:
                        this.opt = com.github.fevernova.data.message.Opt.values()[in.readEnum()];
                        break;

                    case 3:
                        this.timestamp = in.readLong();
                        break;

                    case 4:
                        if (in.readIndex() != 0) {
                            in.readNull();
                            this.tags = null;
                        } else {
                            long size0 = in.readMapStart();
                            java.util.Map<java.lang.String, java.lang.String> m0 = this.tags; // Need fresh name due to limitation of macro system
                            if (m0 == null) {
                                m0 = new java.util.HashMap<java.lang.String, java.lang.String>((int) size0);
                                this.tags = m0;
                            } else
                                m0.clear();
                            for (; 0 < size0; size0 = in.mapNext()) {
                                for (; size0 != 0; size0--) {
                                    java.lang.String k0 = null;
                                    k0 = in.readString();
                                    java.lang.String v0 = null;
                                    if (in.readIndex() != 1) {
                                        in.readNull();
                                        v0 = null;
                                    } else {
                                        v0 = in.readString();
                                    }
                                    m0.put(k0, v0);
                                }
                            }
                        }
                        break;

                    case 5:
                        this.metaId = in.readLong();
                        break;

                    case 6:
                        this.updatesLong = in.readLong();
                        break;

                    case 7:
                        if (in.readIndex() != 0) {
                            in.readNull();
                            this.longs = null;
                        } else {
                            long size1 = in.readArrayStart();
                            java.util.List<java.lang.Long> a1 = this.longs;
                            if (a1 == null) {
                                a1 = new SpecificData.Array<java.lang.Long>((int) size1, SCHEMA$.getField("longs").schema().getTypes().get(0));
                                this.longs = a1;
                            } else
                                a1.clear();
                            SpecificData.Array<java.lang.Long> ga1 =
                                    (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Long>) a1 : null);
                            for (; 0 < size1; size1 = in.arrayNext()) {
                                for (; size1 != 0; size1--) {
                                    java.lang.Long e1 = (ga1 != null ? ga1.peek() : null);
                                    if (in.readIndex() != 1) {
                                        in.readNull();
                                        e1 = null;
                                    } else {
                                        e1 = in.readLong();
                                    }
                                    a1.add(e1);
                                }
                            }
                        }
                        break;

                    case 8:
                        if (in.readIndex() != 0) {
                            in.readNull();
                            this.strings = null;
                        } else {
                            long size2 = in.readArrayStart();
                            java.util.List<java.lang.String> a2 = this.strings;
                            if (a2 == null) {
                                a2 = new SpecificData.Array<java.lang.String>((int) size2, SCHEMA$.getField("strings").schema().getTypes().get(0));
                                this.strings = a2;
                            } else
                                a2.clear();
                            SpecificData.Array<java.lang.String> ga2 =
                                    (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>) a2 : null);
                            for (; 0 < size2; size2 = in.arrayNext()) {
                                for (; size2 != 0; size2--) {
                                    java.lang.String e2 = (ga2 != null ? ga2.peek() : null);
                                    if (in.readIndex() != 1) {
                                        in.readNull();
                                        e2 = null;
                                    } else {
                                        e2 = in.readString();
                                    }
                                    a2.add(e2);
                                }
                            }
                        }
                        break;

                    case 9:
                        if (in.readIndex() != 0) {
                            in.readNull();
                            this.ints = null;
                        } else {
                            long size3 = in.readArrayStart();
                            java.util.List<java.lang.Integer> a3 = this.ints;
                            if (a3 == null) {
                                a3 = new SpecificData.Array<java.lang.Integer>((int) size3, SCHEMA$.getField("ints").schema().getTypes().get(0));
                                this.ints = a3;
                            } else
                                a3.clear();
                            SpecificData.Array<java.lang.Integer> ga3 =
                                    (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>) a3 : null);
                            for (; 0 < size3; size3 = in.arrayNext()) {
                                for (; size3 != 0; size3--) {
                                    java.lang.Integer e3 = (ga3 != null ? ga3.peek() : null);
                                    if (in.readIndex() != 1) {
                                        in.readNull();
                                        e3 = null;
                                    } else {
                                        e3 = in.readInt();
                                    }
                                    a3.add(e3);
                                }
                            }
                        }
                        break;

                    case 10:
                        if (in.readIndex() != 0) {
                            in.readNull();
                            this.doubles = null;
                        } else {
                            long size4 = in.readArrayStart();
                            java.util.List<java.lang.Double> a4 = this.doubles;
                            if (a4 == null) {
                                a4 = new SpecificData.Array<java.lang.Double>((int) size4, SCHEMA$.getField("doubles").schema().getTypes().get(0));
                                this.doubles = a4;
                            } else
                                a4.clear();
                            SpecificData.Array<java.lang.Double> ga4 =
                                    (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>) a4 : null);
                            for (; 0 < size4; size4 = in.arrayNext()) {
                                for (; size4 != 0; size4--) {
                                    java.lang.Double e4 = (ga4 != null ? ga4.peek() : null);
                                    if (in.readIndex() != 1) {
                                        in.readNull();
                                        e4 = null;
                                    } else {
                                        e4 = in.readDouble();
                                    }
                                    a4.add(e4);
                                }
                            }
                        }
                        break;

                    case 11:
                        if (in.readIndex() != 0) {
                            in.readNull();
                            this.floats = null;
                        } else {
                            long size5 = in.readArrayStart();
                            java.util.List<java.lang.Float> a5 = this.floats;
                            if (a5 == null) {
                                a5 = new SpecificData.Array<java.lang.Float>((int) size5, SCHEMA$.getField("floats").schema().getTypes().get(0));
                                this.floats = a5;
                            } else
                                a5.clear();
                            SpecificData.Array<java.lang.Float> ga5 =
                                    (a5 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Float>) a5 : null);
                            for (; 0 < size5; size5 = in.arrayNext()) {
                                for (; size5 != 0; size5--) {
                                    java.lang.Float e5 = (ga5 != null ? ga5.peek() : null);
                                    if (in.readIndex() != 1) {
                                        in.readNull();
                                        e5 = null;
                                    } else {
                                        e5 = in.readFloat();
                                    }
                                    a5.add(e5);
                                }
                            }
                        }
                        break;

                    case 12:
                        if (in.readIndex() != 0) {
                            in.readNull();
                            this.bytes = null;
                        } else {
                            long size6 = in.readArrayStart();
                            java.util.List<java.nio.ByteBuffer> a6 = this.bytes;
                            if (a6 == null) {
                                a6 = new SpecificData.Array<java.nio.ByteBuffer>((int) size6, SCHEMA$.getField("bytes").schema().getTypes().get(0));
                                this.bytes = a6;
                            } else
                                a6.clear();
                            SpecificData.Array<java.nio.ByteBuffer> ga6 =
                                    (a6 instanceof SpecificData.Array ? (SpecificData.Array<java.nio.ByteBuffer>) a6 : null);
                            for (; 0 < size6; size6 = in.arrayNext()) {
                                for (; size6 != 0; size6--) {
                                    java.nio.ByteBuffer e6 = (ga6 != null ? ga6.peek() : null);
                                    if (in.readIndex() != 1) {
                                        in.readNull();
                                        e6 = null;
                                    } else {
                                        e6 = in.readBytes(e6);
                                    }
                                    a6.add(e6);
                                }
                            }
                        }
                        break;

                    case 13:
                        if (in.readIndex() != 0) {
                            in.readNull();
                            this.booleans = null;
                        } else {
                            long size7 = in.readArrayStart();
                            java.util.List<java.lang.Boolean> a7 = this.booleans;
                            if (a7 == null) {
                                a7 = new SpecificData.Array<java.lang.Boolean>((int) size7, SCHEMA$.getField("booleans").schema().getTypes().get(0));
                                this.booleans = a7;
                            } else
                                a7.clear();
                            SpecificData.Array<java.lang.Boolean> ga7 =
                                    (a7 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Boolean>) a7 : null);
                            for (; 0 < size7; size7 = in.arrayNext()) {
                                for (; size7 != 0; size7--) {
                                    java.lang.Boolean e7 = (ga7 != null ? ga7.peek() : null);
                                    if (in.readIndex() != 1) {
                                        in.readNull();
                                        e7 = null;
                                    } else {
                                        e7 = in.readBoolean();
                                    }
                                    a7.add(e7);
                                }
                            }
                        }
                        break;

                    case 14:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.meta = null;
                        } else {
                            this.meta = in.readBytes(this.meta);
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}
